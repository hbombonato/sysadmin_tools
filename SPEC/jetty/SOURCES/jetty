#!/bin/bash
#------------------------------------------------------------------------------
# Based on original jetty.sh from Jetty package (JETTY_HOME/bin/jetty.sh)
#

### BEGIN INIT INFO
# Provides:	jetty
# Required-Start: $local_fs $network $remote_fs $fullduplex $apache
# Required-Stop:
# Default-Start: 3 5
# Default-Stop:
# Description:	Start jetty instances
### END INIT INFO

#########################################################################
# Configs                                                               #
#########################################################################
MYSELF="${0}"
ME="${0##*/}"

PATH="/usr/gnu/bin:/bin:/usr/bin"
export PATH

BASE_APPS="/opt/webapps"
export BASE_APPS

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/jprofiler5/bin/linux-x86_64"
export LD_LIBRARY_PATH

JETTY_RUN="/var/run"
export JETTY_RUN

# Valid variables to use on your xml config
VARS="	JAVA_HOME	\
	JAVA_OPTIONS	\
	JETTY_HOME	\
	JETTY_CONSOLE	\
	JETTY_USER	\
	CLASSPATH	\
	LC_ALL		\
	LANG		\
	TCP_CHECK	
	"

function echo_sucess(){
	tag="${1}"
	msg="${2}"
	[[ "${tag}" == "" ]] && tag="SUCESS"
	echo -en '\033[60G'
	echo -n '['
	echo -en '\033[0;32m'
	echo -n "${tag}"
	echo -en '\033[0;39m'
	echo ']'
	[[ "${msg}" != "" ]] && echo -en "${msg}"
}

function echo_failure(){
	tag="${1}"
	msg="${2}"
	[[ "${tag}" == "" ]] && tag="FAILURE"
	echo -en '\033[60G'
	echo -n '['
	echo -en '\033[0;31m'
	echo -n "${tag}"
	echo -en '\033[0;39m'
	echo ']'
	[[ "${msg}" != "" ]] && echo -en "${msg}"
}

function echo_warning(){
	tag="${1}"
	msg="${2}"
	[[ "${tag}" == "" ]] && tag="WARNING"
	echo -en '\033[60G'
	echo -n '['
	echo -en '\033[0;33m'
	echo -n "${tag}"
	echo -en '\033[0;39m'
	echo ']'
	[[ "${msg}" != "" ]] && echo -en "${msg}"
}

function echo_user(){
	user="${1}"
	msg="${2}"
	cronolog="${3}"
	su -m "${user}" -c 'echo "`date "+%H:%M:%S,%N"`  '"${msg}"'" | '"${cronolog}"
}

	

help() {
#########################################################################
# Script help								#
#########################################################################
	echo "usage: ${ME} {start|stop|restart|list|check|help|version|ver|listvers|configdiff|gotover|tcpcheck} [servlet]"
	echo "	stop [servlet]... :"
	echo "		Stop the servlets, if servlet is ommited,"
	echo "		it stops all servlets found"
	echo "	start [servlet]... :"
	echo "		Start the servlets, if servlet is ommited,"
	echo "		it starts all webapps found"
	echo "	list:"
	echo "		lists the webapps found in system"
	echo "	check [servlet]... :"
	echo "		prints the debug information about the servlets"
	echo "		if omitted, print about all servlets found"
	echo "	version [servlet]... :"
	echo "		Shows servlets versions,"
	echo "		(webapps symlink and label from war file)"
	echo "		if omitted, print about all servlets found"
	echo "	ver:"
	echo "		print script version"
	echo "	tcpcheck servlet: "
	echo "		try to verify if the specific servlet is ok by doing"
	echo "		a GET on a given URL and looking for a specific string"
	echo "		(like a simple check from nagios)."
	echo ""
	echo " 		URI/URI and STRING should be set on xml variable TCP_CHECK"
	echo " 		separated by a pipe (|)."
	echo "		1) Urls starting with http:// will assume a fully qualified and dns"
	echo "		resolvable host address and the url will simply be passed to the"
	echo "		wget command."
 	echo ""		
	echo "	 	2) If the string does not start with 'http' or with a '/'"
	echo "		   jetty host and port are used, but no Host header is sent,"
	echo "		   thus the jetty server should be able to handle requests"
	echo "		   without the Host header."
	echo "	help:"
	echo "		Show this help"
}

buildAppList() {
#########################################################################
# Build the servlet list						#
#########################################################################
app_list=""

if [ ! "${2}" ]; then
	for app in "${BASE_APPS}"/* ; do
		if [ -d "${app}" ] ; then
			app_name="`basename "${app}"`"
			app_list="${app_list} ${app_name}"
		fi
	done
else
	LISTA=`echo $* | cut -d " " -f 2-`
	for s in $LISTA ; do
		app_name="`basename "${s}"`"

		if [ -d "${BASE_APPS}/${s}" ]; then
			app_list="${app_list} ${s}"
		else
			echo "** WARNING: directory [${BASE_APPS}/${s}] doesnt exist"
		fi
	done
fi

if [ ! "${app_list}" ]; then
	echo "** ERROR: no valid servlets found"
	echo "   Aborting..."
	exit 1
fi
}

readConf() {
#########################################################################
# Define environment							#
#########################################################################
	app_name="${app}"
	xml="${app_xml}"
	war=`grep "${app}" "${app_xml}" | egrep "\.war" | /usr/bin/awk -F"<" '{print $2}' | /usr/bin/awk -F">" '{print $2}'`

	if [ ! -f "${xml}" ]; then
		echo "** ERROR: [${xml}] isnt a file"
		echo "   Aborting..."
		exit 1
	fi

	# Create the .pid file based on the app name
	JETTY_PID="${JETTY_RUN}/${app_name}.pid"
	[[ ! -f "${JETTY_PID}" ]] && touch "${JETTY_PID}" 2>/dev/null

	# echo "Search and export variables inside the Jetty config file (.xml)"
	# If not found, set with default options
	for i in $VARS ; do
		TMP=`sed -n "s/.*$i[ ]*=[ ]*\(.*\).*/\1/p" < "${xml}" | awk -F\" '{print $2}'`
		if [ ! -n "$TMP" ]; then
			case "${i}" in
				JAVA_HOME)
					TMP="/usr/java"
				;;
				JAVA_OPTIONS)
        			#-XX:MaxPermSize=128m - Tamanho permanente da memoria
        			#-XX:MinHeapFreeRatio=40 - Porcentagem minima da memoria Heap apos o GarbageCollector para evitar expansão
        			#-XX:MaxHeapFreeRatio=70 - Porcentagem maxima da memoria Heap apos o GarbageCollector para evitar o encolhimento
        			#-verbose:gc - Para gravar em log as informações do GarbageCollector
					TMP="-server -Xms256m -Xmx256m -Djava.awt.headless=true -XX:MaxPermSize=128m -verbose:gc -XX:+PrintGCDetails -XX:MinHeapFreeRatio=40 -XX:MaxHeapFreeRatio=70 "
				;;
				JETTY_HOME)
					TMP="/usr/share/java/jetty6"
				;;
				JETTY_CONSOLE)
					TMP="/var/log/jetty-$app"
				;;
				JETTY_USER)
					TMP="root"
				;;
				CLASSPATH)
					TMP=""
				;;
				LC_ALL|LANG)
					TMP="en_US"
				;;
				TCP_CHECK)
					TMP=""
				;;
			esac
		fi

		# Exporta a variavel
		#
		#AUX="$i"="${TMP}"
		#export AUX
		export $i="${TMP}"
	done

	# Check if config (or default config) it's ok
	# JAVA_HOME
	if [ ! -d "${JAVA_HOME}" ]; then
		echo "** ERROR: ${JAVA_HOME} doesnt exist."
		echo "   Aborting..."
		exit 1
	fi

	# JETTY_HOME
	if [ ! -d "${JETTY_HOME}" ]; then
		echo "** ERROR: ${JETTY_HOME} doesnt exist."
		echo "   Aborting..."
		exit 1
	fi


	#TCP_CHECK string
	if [ "${TCP_CHECK}" != "" ]; then
		JETTY_PORT=$( sed -n "s/.*name=\"Port\">\(.*\)<\/Set>/\1/p" < "${xml}" )
		JETTY_HOST=$( sed -n "s/.*name=\"Host\">\(.*\)<\/Set>/\1/p" < "${xml}" )
		CHECK_URL=$( echo "${TCP_CHECK}" | awk -F"|" '{print $1}' )
		CHECK_STRING=$( echo "${TCP_CHECK}" | awk -F"|" '{print $2}' )
	fi

	# JETTY_CONSOLE
	if [ ! -d "${JETTY_CONSOLE}" ]; then
		if [ -f "${JETTY_CONSOLE}" ]; then
			echo "* WARNING: [${JETTY_CONSOLE}] is a file"
			echo "  Using [/var/log/${app}] instead"
			JETTY_CONSOLE="/var/log/${app}"
			export JETTY_CONSOLE
			mkdir -p "/var/log/${app}"
			chown "${JETTY_USER}:" "/var/log/${app}"
		else
			echo "* WARNING: [${JETTY_CONSOLE}] doesnt exist, creating..."
			mkdir -p "${JETTY_CONSOLE}"
			chown "${JETTY_USER}:" "${JETTY_CONSOLE}"
		fi
	fi

        # JETTY_TMP
	JETTY_TMP="/var/run/jetty"
        if [ ! -d "${JETTY_TMP}" ]; then
                if [ -f "${JETTY_TMP}" ]; then
                        echo "* WARNING: [${TMP}] is a file"
                        echo "  Using [/var/run/jetty] instead"
                        export JETTY_TMP
                        mkdir -p "/var/run/jetty"
			chmod --reference=/tmp "${JETTY_TMP}"
                else
                        echo "* WARNING: [${JETTY_TMP}] doesnt exist, creating..."
                        mkdir -p "${JETTY_TMP}"
			chmod --reference=/tmp "${JETTY_TMP}"
                fi
        fi

	EVENT="${JETTY_CONSOLE}/event.log"
	export EVENT
	STDERR="${JETTY_CONSOLE}/stderr.log"
	export STDERR
	STDOUT="${JETTY_CONSOLE}/stdout.log"
	export STDOUT

	# JETTY_USER
	if [ ! "`grep ^${JETTY_USER}: /etc/passwd`" ]; then
		echo "* WARNING: User [${JETTY_USER}] doesnt exist in /etc/passwd"
		echo "  Using user [${JETTY_USER_DEF}] instead"
		JETTY_USER="${JETTY_USER_DEF}"
		export JETTY_USER
	fi
}

buildCP() {
#########################################################################
# Build classpath and RUN_CMD						#
#########################################################################
	if [ "${CLASSPATH}" ]; then
		echo 
		START_CMD="${JAVA_HOME}/bin/java ${JAVA_OPTIONS} -Djetty.home=${JETTY_HOME} -Djava.io.tmpdir=${JETTY_TMP} -jar ${JETTY_HOME}/start.jar ${CLASSPATH} ${app_xml}"
	else
		START_CMD="${JAVA_HOME}/bin/java ${JAVA_OPTIONS} -Djetty.home=${JETTY_HOME} -Djava.io.tmpdir=${JETTY_TMP} -jar ${JETTY_HOME}/start.jar ${app_xml}"
	fi
}

function do_get(){
	URL=$1
	dablioget=$(which wget)
	if [ ! -x "${dablioget}" ]; then
		echo "ERROR: No wget , no game ... sorry !!!"
		exit 1
	fi
	if [ ! -z "${2}" ] ; then 
		"${dablioget}" -nv -O - --header \"Host: "${2}"\" "${URL}" | grep "${CHECK_STRING}"  > "/dev/null" 2>&1
	else
		"${dablioget}" -nv -O - "${URL}" | grep "${CHECK_STRING}"  > "/dev/null" 2>&1
	fi
	if [ "${?}" = 0 ] ;then
		echo "SUCCESS: String '${CHECK_STRING}' found. We are looking good !!!"	
	else
		echo "ERROR: Ooops, its ugly here. Dig deeper !"
	fi
}

function tcpcheck() {
	buildAppList $@
	for app in ${app_list} ; do
	if [ -d "${BASE_APPS}/${app}/config" ] ; then
		app_xml="${BASE_APPS}/${app}/config/${app}.xml"
	else
		app_xml="${BASE_APPS}/${app}/${app}.xml"
	fi
	if [ -f "${app_xml}" ] ; then
		readConf "${app_xml}" "${app}"
		if [ -z "${CHECK_STRING}" ]; then
			echo "ERROR: I need a check string. See help"
			exit 1
		fi 
		if [ "${CHECK_URL:0:4}" == "http" -o \
		     "${CHECK_URL:0:4}" == "HTTP" ]; then
			do_get "${CHECK_URL}"
		elif [ "${CHECK_URL:0:1}" == "/" ]; then 
			do_get "http://${JETTY_HOST}:${JETTY_PORT}${CHECK_URL}"
		else
			do_get "http://${JETTY_HOST}:${JETTY_PORT}${CHECK_URL}" "${CHECK_URL%%/*}"
		fi 
	else
		echo "** ERROR: ${app_xml} doesn't exist"
	fi
	done
}

start() {
#########################################################################
# Start function							#
#########################################################################
	if [ "$JETTY_USER" != "" -a "$LOGNAME" != "$JETTY_USER" ]; then
		chown "${JETTY_USER}" "${JETTY_PID}"
		chown -R "${JETTY_USER}" "${JETTY_CONSOLE}"
		su - "${JETTY_USER}" -c "${MYSELF} start ${app}" -s "${SHELL:-/bin/bash}"
		return
	fi

	buildCP
	
	echo -n "Starting Jetty Server [${app}]:"
	
	s_msg=""
	
	if [ -s "${JETTY_PID}" ]; then
		PID=`cat "${JETTY_PID}" 2> /dev/null`
		if [ -d "/proc/${PID}" ]; then
			s_msg="${ME}: ERROR - The Jetty Server '${app}' is already running, pid=${PID}.\n"
			echo_failure "" "${s_msg}"; return 2
		fi
	fi
	
	pushd "${JETTY_CONSOLE}" >> /dev/null 2>&1
	nohup sh -c "exec ${START_CMD} >> ${STDOUT} 2>> ${STDERR}" > /dev/null 2>&1 &
	rm -f "${PWD}/nohup.out"
	popd >> /dev/null 2>&1
	
	echo "${!}" > "${JETTY_PID}"
	PID="${!}"

	sleep 2

	if [ ! -d "/proc/${PID}" ]; then
		s_msg="${ME}: ERROR - I can't start Jetty Server [${app}].\n${s_msg}"
		echo_failure "" "${s_msg}"
		echo "Jetty Server could not initialize.STARTED Jetty `date`" >> "${EVENT}"
		return 2
	else
		s_msg="${ME}: INFO - Jetty Server [${app}] pid=${PID}.\n"
		echo_sucess "STARTED" "${s_msg}"
		echo "STARTED Jetty `date`" >> "${EVENT}"
		return 0
	fi
}

stop() {
#########################################################################
# Stop function								#
#########################################################################
	if [ "${JETTY_USER}" != "" -a "${LOGNAME}" != "${JETTY_USER}" ]; then
		su - "${JETTY_USER}" -c "${MYSELF} stop ${app}" -s "${SHELL:-/bin/bash}"
		return
	fi
	
	echo -n "Stopping Jetty Server [${app}]:"
	
	s_msg=""
	
	PID=`cat "${JETTY_PID}" 2> /dev/null`
	if [ ! -d "/proc/${PID}" -o "${PID}" = "" ]; then
		s_msg="${ME}: INFO - The Jetty Server '${app}' isn't running.\n${s_msg}"
		echo_failure "" "${s_msg}"
		return 1
	else
		pushd "${JETTY_CONSOLE}" >/dev/null 2>&1
		for t in 1 2 3 4 5 6 7 8 9 10 11 12 13; do
			echo -n '. '
			kill -TERM "${PID}" >>/dev/null 2>&1
			sleep 2
			if [[ ! -d "/proc/${PID}" ]]; then
				echo_sucess "STOPPED" "${s_msg}"; return 0
				echo "STOPPED (NORMAL STOP) Jetty `date`" >> "${JETTY_CONSOLE}/event.log"
				:> "${JETTY_PID}"
				popd >> /dev/null 2>&1
				return 0
			fi
		done
		
		kill -9 "${PID}" >>/dev/null 2>&1
		sleep 4
		popd >> /dev/null 2>&1
		
		if [[ ! -d "/proc/${PID}" ]]; then
			s_msg="${ME}: WARNING - The Jetty Server '${app}' was brutally stopped.\n${s_msg}"
			echo_sucess "STOPPED" "${s_msg}"
			echo "STOPPED (BRUTAL STOP) Jetty `date`" >> "${JETTY_CONSOLE}/event.log"
			:> "${JETTY_PID}"
			return 0
		else
			s_msg="${ME}: ERROR - The Jetty Server '${app}' is taking to stop."
			echo_failure "" "${s_msg}"
			echo "IT'S IMPOSSIBLE TO STOP Jetty `date`" >> "${JETTY_CONSOLE}/event.log"
			:> "${JETTY_PID}"
			return 2
		fi
	fi
	return 2
}

check() {
#########################################################################
# Check available servlet's and enviroment configuration		#
#########################################################################
	echo "================================================="
	echo "$app: [${app_xml}]"
	if [ -f "${JETTY_PID}" ]; then
		PID=`cat "${JETTY_PID}" 2> /dev/null`
		if [ ! -d "/proc/${PID}" -o "${PID}" = "" ]; then
			echo "Servlet is stopped"
		else
			echo "Servlet is up and running: ${PID}"
		fi
	else
		echo "Servlet is stopped"
	fi
	echo "================================================="
	for i in $VARS ; do
		echo "$i = [${!i}]"
	done
	echo "JETTY_PID = [${JETTY_PID}]"
}


showlabel() {
#########################################################################
# Check war file versions					#
#########################################################################
	echo "================================================="
	echo "$app: [${war}]"
	echo "================================================="

	if [ -f "${war}" ]; then
		if [ -f "/bin/rpm" ]; then
			VER=`/bin/rpm -qf ${war}`
			if [ "${VER}" == "" ]; then
				echo "** WARNING: Label not found"
			else
				echo -e "Label found on .war file:\n\t${VER}"
			fi
		else
			echo "/bin/rpm not available"
		fi
	else
		echo "File ${war} doesn't exist?"
	fi

}

#########################################################################
# M A I N  function - Do the action					#
#########################################################################
case "${1}" in
	"start")
		buildAppList $@
		for app in ${app_list} ; do
		     if [ -d "${BASE_APPS}/${app}/config" ] ; then
			app_xml="${BASE_APPS}/${app}/config/${app}.xml"
		     else
			app_xml="${BASE_APPS}/${app}/${app}.xml"
		     fi
			if [ -f "${app_xml}" ] ; then
				readConf "${app_xml}" "${app}"
				start
			else
				echo "** ERROR: ${app_xml} doesn't exist"
			fi
		done
	;;
	"stop")
		buildAppList $@
		for app in ${app_list} ; do
		     if [ -d "${BASE_APPS}/${app}/config" ] ; then
			app_xml="${BASE_APPS}/${app}/config/${app}.xml"
		     else
			app_xml="${BASE_APPS}/${app}/${app}.xml"
		     fi
			if [ -f "${app_xml}" ] ; then
				readConf "${app_xml}" "${app}"
				stop
			else
				echo "** ERROR: ${app_xml} doesn't exist"
			fi
		done
	;;
	"restart")
		buildAppList $@
		for app in ${app_list} ; do
		     if [ -d "${BASE_APPS}/${app}/config" ] ; then
			app_xml="${BASE_APPS}/${app}/config/${app}.xml"
		     else
			app_xml="${BASE_APPS}/${app}/${app}.xml"
		     fi
			if [ -f "${app_xml}" ] ; then
				readConf "${app_xml}" "${app}"
				buildCP
				stop
				[[ "${?}" != "2" ]] && start
			else
				echo "** ERROR: ${app_xml} doesn't exist"
			fi
		done
	;;
	"check")
		buildAppList $@
		for app in ${app_list} ; do
		     if [ -d "${BASE_APPS}/${app}/config" ] ; then
			app_xml="${BASE_APPS}/${app}/config/${app}.xml"
		     else
			app_xml="${BASE_APPS}/${app}/${app}.xml"
		     fi
			if [ -f ${app_xml} ] ; then
				readConf "${app_xml}" "${app}"
				echo "Checking ${app}."
				check "${app}"
			else
				echo "** ERROR: $app_xml doesn't exist"
			fi
		done
	;;
	"list")
		buildAppList $@
		echo "Servlets: $app_list"
	;;
	"version")
		buildAppList $@
		for app in ${app_list} ; do
		     if [ -d "${BASE_APPS}/${app}/config" ] ; then
			app_xml="${BASE_APPS}/${app}/config/${app}.xml"
		     else
			app_xml="${BASE_APPS}/${app}/${app}.xml"
		     fi
			if [ -f "${app_xml}" ] ; then
				readConf "${app_xml}" "${app}"
				showlabel "${war}"
			else
				echo "** ERROR: ${app_xml} doesn't exist"
			fi

		done
	;;
	"help")
		help
	;;
	"ver")
		echo "Version: ${VER}"
		echo "SVN Info: ${SVNInfo}"
	;;
	"tcpcheck")
		tcpcheck $@
	;;
	*)
		echo "usage: ${ME} {start|stop|restart|list|check|help|version|ver|tcpcheck} [servlet]..."
	;;
esac
#EOF
